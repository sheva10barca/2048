{"version":3,"sources":["scripts/main.js"],"names":["messageStart","document","querySelector","messageWin","messageLose","gameField","gameFieldWidth","buttonStart","gameScore","winScore","score","isGameStarted","gameBoard","boardInit","Array","from","length","fill","resetGameBoard","handleWin","flat","includes","classList","remove","add","innerText","removeEventListener","movesController","handleLose","some","cell","randomNumber","Math","floor","random","fillRandomCell","row","col","fillBoard","forEach","rowCount","_","cellCount","tile","rows","cells","tileValue","duplicateGameBoard","map","slice","compareArrays","newArr","prevArr","JSON","stringify","flipGridVertical","grid","reverse","spinGrid","newGrid","colCount","slideRight","notEmptyCells","filter","emptyCells","concat","mergeCells","arr","i","makeMove","keypress","undoFlip","undoSpin","preMergeGrid","preUndoGridsCompare","e","key","addEventListener","contains"],"mappings":"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","file":"main.6e9b4397.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst gameField = document.querySelector('.game-field');\nconst gameFieldWidth = 4;\n\nconst buttonStart = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\n\nconst winScore = 2048;\nlet score = 0;\nlet isGameStarted = false;\n\nlet gameBoard = boardInit();\n\nfunction boardInit() {\n  return Array.from({ length: gameFieldWidth },\n    () => Array(gameFieldWidth).fill(0));\n}\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('start') && !isGameStarted) {\n    isGameStarted = true;\n\n    messageStart.classList.add('hidden');\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    buttonStart.innerText = 'Restart';\n  } else if (buttonStart.classList.contains('restart')) {\n    isGameStarted = false;\n    gameScore.innerText = 0;\n    score = 0;\n\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  resetGameBoard();\n  fillRandomCell();\n  fillRandomCell();\n  fillBoard();\n\n  document.addEventListener('keyup', movesController);\n});\n\nfunction resetGameBoard() {\n  gameBoard = boardInit();\n}\n\nfunction handleWin() {\n  const userWon = gameBoard.flat().includes(winScore);\n\n  if (userWon) {\n    messageWin.classList.remove('hidden');\n    buttonStart.classList.remove('restart');\n    buttonStart.classList.add('start');\n    buttonStart.innerText = 'Start';\n\n    resetGameBoard();\n    document.removeEventListener('keyup', movesController);\n  }\n}\n\nfunction handleLose() {\n  const hasEmptyCell = gameBoard.flat().some((cell) => cell === 0);\n\n  if (!hasEmptyCell) {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    document.removeEventListener('keyup', movesController);\n  }\n}\n\nfunction randomNumber() {\n  return Math.floor(Math.random() * gameFieldWidth);\n}\n\nfunction fillRandomCell() {\n  const [row, col] = [randomNumber(), randomNumber()];\n\n  if (!gameBoard[row][col]) {\n    gameBoard[row][col] = Math.random() > 0.9 ? 4 : 2;\n    handleLose();\n  } else {\n    fillRandomCell();\n  }\n}\n\nfunction fillBoard() {\n  gameBoard.forEach((row, rowCount) => {\n    row.forEach((_, cellCount) => {\n      const tile = gameField.rows[rowCount].cells[cellCount];\n      const tileValue = gameBoard[rowCount][cellCount];\n\n      tile.classList = 'field-cell';\n      tile.innerText = tileValue;\n\n      if (tileValue > 0) {\n        tile.classList.add('field-cell--' + tileValue);\n      } else {\n        tile.innerText = '';\n      }\n    });\n  });\n}\n\nfunction duplicateGameBoard() {\n  return gameBoard.map((row) => row.slice());\n}\n\nfunction compareArrays(newArr, prevArr) {\n  return JSON.stringify(newArr) === JSON.stringify(prevArr);\n}\n\nfunction flipGridVertical(grid) {\n  return grid.map((row) => [...row].reverse());\n}\n\nfunction spinGrid(grid) {\n  const newGrid = boardInit();\n\n  newGrid.forEach((row, rowCount) => {\n    row.forEach((_, colCount) => {\n      newGrid[rowCount][colCount] = grid[colCount][rowCount];\n    });\n  });\n\n  return newGrid;\n}\n\nfunction slideRight(row) {\n  const notEmptyCells = row.filter((cell) => cell > 0);\n  const emptyCells = Array(gameFieldWidth - notEmptyCells.length).fill(0);\n\n  return emptyCells.concat(notEmptyCells);\n}\n\nfunction mergeCells(arr) {\n  for (let i = gameFieldWidth - 1; i > 0; i--) {\n    if (arr[i] === arr[i - 1]) {\n      arr[i] += arr[i - 1];\n      arr[i - 1] = 0;\n      score += arr[i];\n    }\n  }\n\n  gameScore.innerText = score;\n\n  return arr;\n}\n\nfunction makeMove(keypress) {\n  let undoFlip = false;\n  let undoSpin = false;\n\n  switch (keypress) {\n    case 'ArrowUp':\n      gameBoard = spinGrid(gameBoard);\n      gameBoard = flipGridVertical(gameBoard);\n      undoFlip = true;\n      undoSpin = true;\n      break;\n    case 'ArrowDown':\n      gameBoard = spinGrid(gameBoard);\n      undoSpin = true;\n      break;\n    case 'ArrowLeft':\n      gameBoard = flipGridVertical(gameBoard);\n      undoFlip = true;\n      break;\n    default:\n      break;\n  }\n\n  const preMergeGrid = duplicateGameBoard();\n\n  gameBoard = gameBoard.map((row) => {\n    return slideRight(mergeCells(slideRight(row)));\n  });\n\n  const preUndoGridsCompare = compareArrays(gameBoard, preMergeGrid);\n\n  if (undoFlip) {\n    gameBoard = flipGridVertical(gameBoard);\n  }\n\n  if (undoSpin) {\n    gameBoard = spinGrid(gameBoard);\n  }\n\n  if (!preUndoGridsCompare) {\n    fillRandomCell();\n  }\n}\n\nfunction movesController(e) {\n  makeMove(e.key);\n  fillBoard();\n  handleWin();\n}\n"]}